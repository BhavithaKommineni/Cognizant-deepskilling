1.	Understand Linked Lists:
o	Explain the different types of linked lists (Singly Linked List, Doubly Linked List).

Answer:

Singly Linked List:

Structure: A singly linked list is a collection of nodes where each node contains data and a pointer to the next node in the sequence. The last node points to null, indicating the end of the list.
Operations: Singly linked lists allow for efficient insertions and deletions at the beginning of the list. Traversal is one-directional, from head to tail.

Doubly Linked List:
Structure: A doubly linked list is similar to a singly linked list, but each node has two pointers: one pointing to the next node and another pointing to the previous node. This allows traversal in both directions.
Operations: Doubly linked lists provide efficient insertions and deletions at both ends and allow traversal in both forward and backward directions, making them more flexible for certain operations compared to singly linked lists.

4.	Analysis:
o	Analyze the time complexity of each operation.
o	Discuss the advantages of linked lists over arrays for dynamic data.

Answer :

Time Complexity:

Add Operation: O(n) to add a task at the end, as it requires traversing the list to find the last node. However, adding at the head is O(1).
Search Operation: O(n) as it requires potentially traversing the entire list to find the task.
Traverse Operation: O(n) since each node must be visited once.
Delete Operation: O(n) as it requires searching for the node and updating links, potentially involving a traversal of the entire list.

Advantages of Linked Lists over Arrays for Dynamic Data:
Dynamic Size: Linked lists can easily grow and shrink in size, whereas arrays have a fixed size that requires resizing or allocation of a new array when limits are reached.
Efficient Insertions/Deletions: Inserting or deleting elements in a linked list is efficient (O(1)) when done at the head or known positions with a reference, as it involves updating pointers rather than shifting elements.
Memory Utilization: Linked lists use memory as needed for each element, whereas arrays may allocate more memory than required.

Disadvantages:
Memory Overhead: Each node in a linked list requires additional memory for the pointer(s).
Cache Locality: Arrays benefit from better cache locality due to contiguous memory allocation, leading to potentially faster access times than linked lists.
Access Time: Accessing an element by index is O(n) in linked lists compared to O(1) in arrays.
